0
00:00:04,377 --> 00:00:07,046
while 루프는 다양한 부울 연산자들과 사용하지만,

1
00:00:07,047 --> 00:00:11,050
부울 문자 테스트를 사용해서

2
00:00:11,051 --> 00:00:13,170
입력이 우리가 원하는 형식인지 확인하는 작업을 그중에서도 많이 합니다

3
00:00:14,370 --> 00:00:19,890
이름에서 성만을 원할 때를 예로 들어보겠습니다

4
00:00:19,891 --> 00:00:26,960
첫번째 예시에서, student_fname라고 정의된 변수를 가지고 있습니다

5
00:00:26,961 --> 00:00:31,960
일단 그냥 빈 문자열로 둬보겠습니다

6
00:00:31,961 --> 00:00:36,140
그리고 while 루프에서 부울 문자열 테스트를 합니다.

7
00:00:37,210 --> 00:00:40,600
여기에서는 학생 이름이

8
00:00:40,601 --> 00:00:42,570
알파벳 문자인지 확인합니다.

9
00:00:43,650 --> 00:00:49,450
그리고 거짓이라고 나온다면, 입력함수를 실행해서 다시 입력을 받도록

10
00:00:49,451 --> 00:00:54,650
할 겁니다. 왜냐하면 알파벳 문자로 된 이름일때만 참이고,

11
00:00:54,651 --> 00:00:59,650
아래 코드로 출력할 수 있기 때문입니다.

12
00:01:00,880 --> 00:01:02,265
이 코드를 실행해 봅시다.

13
00:01:05,367 --> 00:01:08,645
Alton D를 넣으면 입력에 실패합니다.

14
00:01:12,497 --> 00:01:19,460
입력이 실패했다는건 논리식에서 false가 나왔다는 뜻이고,

15
00:01:19,461 --> 00:01:22,320
그래서 코드가 다시 실행되어 입력하라고 나옵니다

16
00:01:22,321 --> 00:01:26,680
여기서 문제는 공백이 알파벳이 아니라는 점입니다

17
00:01:26,681 --> 00:01:28,881
그래서 우리는 오직 이름의 성만을 입력받고 싶습니다. 

18
00:01:28,882 --> 00:01:32,822
이름의 성에는 공백이 없기 때문에

19
00:01:32,823 --> 00:01:36,323
이 코드는 우리의 목적에 잘 부합하는 코드입니다

20
00:01:38,955 --> 00:01:42,412
그래서 이제 Alton에 공백없이 입력 하겠습니다

21
00:01:45,004 --> 00:01:48,342
인사말과 함께 제가 친 Alton이 출력되네요

22
00:01:52,624 --> 00:01:54,939
이 두 번째 예제에서는

23
00:01:54,940 --> 00:02:00,570
모든 입력이 대문자임을 검사하는 while 루프문이 있네요

24
00:02:01,620 --> 00:02:05,210
마지막 루프에서했던 것과 똑같은 작업을 수행했습니다.

25
00:02:05,211 --> 00:02:07,480
거짓인지 확인하고

26
00:02:07,481 --> 00:02:09,623
메세지가 모두 대문자인걸 확인하고,

27
00:02:09,624 --> 00:02:13,815
아니라면 루프를 계속 진행시키는 거죠

28
00:02:13,816 --> 00:02:16,468
그리고 이번 비교방식은 

29
00:02:16,469 --> 00:02:18,560
"조건과 다르면~" 입니다

30
00:02:18,561 --> 00:02:23,502
대문자와 소문자를 같이 사용했을 경우에

31
00:02:23,503 --> 00:02:27,940
참이 아닌거죠

32
00:02:27,941 --> 00:02:35,460
그래서 이런 일이 발생하면 아래의 코드가 실행될 것입니다.

33
00:02:35,461 --> 00:02:40,009
그래서 모두 대문자로 입력할때까지 계속 입력을 요구할 겁니다. 그래서 실행 해 봅시다.

34
00:02:43,586 --> 00:02:47,222
"죄송한데 들리지 않습니다"

35
00:02:51,340 --> 00:02:53,341
"큰 소리로 외쳐주세요"

36
00:02:57,654 --> 00:02:59,780
이제 메세지가 나왔네요

37
00:03:02,381 --> 00:03:07,357
마지막으로, 양의 정수만을 입력으로 요구하는

38
00:03:07,358 --> 00:03:11,080
예제가 있습니다

39
00:03:11,081 --> 00:03:15,050
이런 경우에는 isdigit이 매우 적합하죠 

40
00:03:15,051 --> 00:03:20,240
isdigit은 소수점이 포함되거나, 음의 정수라면 거짓이 반환되고,

41
00:03:20,241 --> 00:03:24,449
오로지 양의 정수만 참이 반환됩니다

42
00:03:24,450 --> 00:03:29,160
또한 숫자만이 참으로 인식됩니다

43
00:03:30,270 --> 00:03:35,310
isdigit이 false를 반환하는 한

44
00:03:35,311 --> 00:03:38,540
아래의 코드가 실행됩니다

45
00:03:38,541 --> 00:03:41,789
코드를 실행해 봅시다.

46
00:03:41,790 --> 00:03:47,264
저는 3.3, -5,

47
00:03:47,265 --> 00:03:52,430
심지어 텍스트로 쓰인 숫자입니다.

48
00:03:52,431 --> 00:03:58,800
마지막으로, 34를 넣어보겠습니다. 이건 양의 정수죠.

49
00:03:58,801 --> 00:04:03,745
우리는 while 루프를 사용하여 입력 시에 코드를 실행하는

50
00:04:03,746 --> 00:04:07,967
데 필요한 적절한 형식을 유지할 수 있습니다.

