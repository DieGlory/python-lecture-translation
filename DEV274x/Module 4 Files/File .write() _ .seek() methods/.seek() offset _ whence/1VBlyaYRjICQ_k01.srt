0
00:00:04,201 --> 00:00:07,224
seek 메소드에서 매개변수 offset과 whence로

1
00:00:07,225 --> 00:00:12,349
파일의 읽거나 쓰는 위치를 조정할 수 있습니다

2
00:00:12,350 --> 00:00:13,774
이 예제에서는

3
00:00:13,775 --> 00:00:18,810
 tips_file을 w+ 모드로 열어보겠습니다

4
00:00:18,811 --> 00:00:21,360
아마 새로운 파일이 만들어질거고

5
00:00:21,361 --> 00:00:25,120
그리고 tips_file에 몇가지 팁을 기록할겁니다

6
00:00:25,121 --> 00:00:29,060
여기보면 두줄짜리 문장이 있습니다

7
00:00:29,061 --> 00:00:32,300
파일에 문자열을 기록하고

8
00:00:32,301 --> 00:00:35,130
파일의 시작부분으로 가서 읽고 출력해볼겁니다

9
00:00:35,131 --> 00:00:37,330
이 파일을 살펴보겠습니다. 

10
00:00:37,331 --> 00:00:42,000
"간단함 함수, 변수이름 사용하기", "주석달기", "함수화하기"

11
00:00:42,001 --> 00:00:44,920
라는 3가지 팁이 나오네요

12
00:00:46,000 --> 00:00:50,508
자, 파일을 살펴봅시다. 

13
00:00:50,509 --> 00:00:55,671
index 4로 가봅시다. 

14
00:00:55,672 --> 00:00:58,158
어떻게 되는지 확인하여 봅시다. 

15
00:00:58,159 --> 00:01:03,396
index 4로 간 뒤에 

16
00:01:03,397 --> 00:01:08,493
어떻게 되냐면

17
00:01:08,494 --> 00:01:12,174
 0, 1, 2, 3, 4 .. 이 뒤 부터

18
00:01:12,175 --> 00:01:16,440
읽어서 출력하게 됩니다

19
00:01:16,441 --> 00:01:22,130
그래서 공백 과 "these simple functions and variable names."가 나옵니다

20
00:01:22,131 --> 00:01:24,430
여기에 다른 예를 살펴보겠습니다. 

21
00:01:24,431 --> 00:01:28,448
우리는 처음부터 다시 파일을 읽으려고 합니다. 

22
00:01:28,449 --> 00:01:30,830
그런 다음 슬라이싱을 이용해서 index 4부터 파일을 출력하고

23
00:01:30,831 --> 00:01:35,520
seek(4)를 사용했을때랑 

24
00:01:35,521 --> 00:01:41,970
같은 동작을 하는걸 알수 있습니다

25
00:01:41,971 --> 00:01:45,730
그래서 여기보면 index 4에서 부터 시작합니다

26
00:01:45,731 --> 00:01:48,160
그래서 이런식으로 출력되죠

27
00:01:50,750 --> 00:01:54,670
seek ()에는 whence라는 또 다른 선택적 매개변수가 있습니다. 

28
00:01:54,671 --> 00:01:57,410
whence는 from where이랑 같은 말입니다

29
00:01:58,750 --> 00:02:00,750
그리고 우리는 whence에 세 가지 모드가 있습니다. 

30
00:02:00,751 --> 00:02:03,976
0,1,2가 있죠

31
00:02:03,977 --> 00:02:07,220
whence에 아무런 값도 넣지 않는다면 

32
00:02:07,221 --> 00:02:10,980
기본값으로 0이 들어가고 

33
00:02:10,981 --> 00:02:14,610
파일 시작 부분부터 읽는 것과 같습니다. 

34
00:02:14,611 --> 00:02:16,921
그래서 seek(0,0)는

35
00:02:16,922 --> 00:02:20,580
기본 seek (0)과 같습니다. 

36
00:02:20,180 --> 00:02:22,640
whence 매개변수로 1을 준다면 

37
00:02:22,641 --> 00:02:26,430
현재 위치에서 부터, 오프셋만큼 파일포인터를 이동시킵니다

38
00:02:26,431 --> 00:02:30,450
whence가 2이면 파일의 끝에 위치하겠다는 뜻이고

39
00:02:30,451 --> 00:02:34,200
 offset이 항상 0이라는 의미이기도 합니다. 

40
00:02:34,201 --> 00:02:38,160
이제 파일의 끝에 내용을 쓰는 예제를 한번 보겠습니다

41
00:02:38,161 --> 00:02:41,210
우리는 알다시피 파일을 이미 만들어놨고

42
00:02:41,211 --> 00:02:46,250
여기 보이는게 파일의 내용입니다

43
00:02:46,251 --> 00:02:49,845
"organized code into functions" 다음에 내용을 작성하려고 해서

44
00:02:49,846 --> 00:02:53,820
seek(0,2)를 사용하겠습니다

45
00:02:53,821 --> 00:02:59,000
여기 출력하는 예제가 있습니다

46
00:02:59,001 --> 00:03:02,700
파일의 처음부분으로 돌아가서 파일을 읽고 전부 출력했습니다

47
00:03:02,701 --> 00:03:06,940
그래서 보면 whence를 사용해서 파일의 끝으로 가서 

48
00:03:06,941 --> 00:03:08,725
새로운 내용을 추가한걸 알 수 있습니다

49
00:03:08,726 --> 00:03:11,071
다른 예가 있습니다. 

50
00:03:11,072 --> 00:03:16,070
이번엔 파일의 시작 부분으로 돌아갈 것입니다. 

51
00:03:16,071 --> 00:03:17,958
seek(0)를 쓸겁니다

52
00:03:17,959 --> 00:03:23,153
그러고 나서 우리는 문자열 메소드를 사용하는 것을 제외하고는

53
00:03:23,154 --> 00:03:28,560
첫 번째 라인에 있는 것과 똑같은 라인을 다시 작성하려고 합니다. 

54
00:03:29,790 --> 00:03:32,510
우리는 upper()를 파일에 사용할겁니다

55
00:03:32,511 --> 00:03:35,974
그러고 나서 우리는 seek (0, 0)을 사용하여

56
00:03:35,975 --> 00:03:40,675
file의 시작 부분으로 돌아가거나, 그냥 seek (0)을 사용했수도 있구요. 

57
00:03:40,676 --> 00:03:43,000
그러고 나서 파일들 읽을 것입니다. 

58
00:03:43,001 --> 00:03:46,000
그래서 우리는 덮어쓴 것을 보았습니다. 

59
00:03:46,001 --> 00:03:51,800
0으로 가면 거기에 있던 문자를 덮어씁니다. 

60
00:03:51,801 --> 00:03:56,030
따라서 여기에서 정확하게 길이가 일치 하지 않으면 

61
00:03:56,031 --> 00:04:00,190
파일에 어떤 내용이 있든 덮어쓰게 됩니다

62
00:04:01,840 --> 00:04:08,600
우리는 file·seek () 메서드가 문자 offset과 whence, 또는 "from where"값이라는 

63
00:04:08,601 --> 00:04:13,730
두 개의 매개 변수를 가지는데, 

64
00:04:13,731 --> 00:04:18,610
이때 whence의 값이 0이면 파일의 시작 부분에 오프셋을 배치합니다.

65
00:04:18,611 --> 00:04:23,810
1은 현재 가리키는 위치에서 

66
00:04:23,811 --> 00:04:26,780
값을 유지하고, 2 파일의 끝 부분에 

67
00:04:26,781 --> 00:04:28,870
파일을 추가하는 데 유용합니다. 

