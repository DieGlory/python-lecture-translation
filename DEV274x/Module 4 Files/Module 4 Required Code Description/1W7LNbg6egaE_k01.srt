0
00:00:00,000 --> 00:00:05,245
모듈 4의 필수 코딩 예제를 살펴보겠습니다. 

1
00:00:05,245 --> 00:00:07,950
우리는 파일을 사용할 것인데요, 

2
00:00:07,950 --> 00:00:10,060
날씨에 관한 파일을 읽고 

3
00:00:10,060 --> 00:00:13,440
그 파일을 출력할 것입니다. 

4
00:00:13,440 --> 00:00:15,330
즉 파일 쓰기를 한 다음, 

5
00:00:15,330 --> 00:00:18,625
포매팅된 데이터의 일부를 출력할 것입니다.

6
00:00:18,625 --> 00:00:21,240
해당 출력이 어떤 모양으로 생겼는지는

7
00:00:21,240 --> 00:00:23,985
여기 써 있는 부분에서 확인하실 수 있습니다.

8
00:00:23,985 --> 00:00:27,825
여러분은 이 부분을 모두 주의 깊게 읽어보셔야 합니다.

9
00:00:27,825 --> 00:00:31,450
그 전에, 약간정도는 지금 함께 다루어보기로 합시다.

10
00:00:31,450 --> 00:00:36,555
먼저 Jupyter Notebook을 살펴봅시다.

11
00:00:36,555 --> 00:00:39,510
이 Jupyter Notebook은 위에 써있는 것과 같은 내용을 다루고 있습니다.

12
00:00:39,510 --> 00:00:44,660
제가 여기 약간의 코드를 미리 로드해 놓았는데요,

13
00:00:44,660 --> 00:00:50,555
한번 실행해 보도록 합시다.

14
00:00:50,555 --> 00:00:52,545
그러면....출력값을 얻을수 있습니다.

15
00:00:52,545 --> 00:00:56,660
여기서 제가 해보고자 하는 것은 다음과 같습니다. 보시죠.

16
00:00:56,660 --> 00:00:58,145
여기 출력값이 쭉 써있는데요,

17
00:00:58,145 --> 00:00:59,870
각 도시명이 써있습니다.

18
00:00:59,870 --> 00:01:01,985
이때 Rio De Janeiro가 

19
00:01:01,985 --> 00:01:05,350
파일에 추가해야 하는 항목입니다.

20
00:01:05,350 --> 00:01:08,270
여기서 저는 코드를 하나 실행할 것입니다. 

21
00:01:08,270 --> 00:01:11,570
이 코드는 github에서 파일을 가져와서 열어주는 코드입니다.

22
00:01:11,570 --> 00:01:14,575
그리고는 raw 파일을 읽습니다.

23
00:01:14,575 --> 00:01:17,115
계속해서 진행해보겠습니다. 

24
00:01:17,115 --> 00:01:21,165
포맷되지 않은 형태인 것을 확인할 수 있군요.

25
00:01:21,165 --> 00:01:25,120
도시들이 월별 평균 형태의 헤더를 취하지 않고 있죠?

26
00:01:25,120 --> 00:01:29,160
여기 보시는 첫 번째 줄이 헤더입니다.

27
00:01:29,160 --> 00:01:31,920
도시이름, 국가,

28
00:01:31,920 --> 00:01:34,200
월평균 최고 기온, 월평균 최저 기온을 

29
00:01:34,200 --> 00:01:35,820
포함하고 있다는 것을 말해줍니다.

30
00:01:35,820 --> 00:01:37,290
예를 들어서, 베이징 시를 보면

31
00:01:37,290 --> 00:01:40,815
국가 : 중국,

32
00:01:40,815 --> 00:01:45,270
평균 최고 기온 : 30.9 섭씨

33
00:01:45,270 --> 00:01:49,660
평균 최저 기온 : -8.4 섭씨 라고 나와있습니다.

34
00:01:49,660 --> 00:01:53,650
마지막 도시는 도쿄로 끝나는군요.

35
00:01:53,650 --> 00:01:56,070
우리는 리우데자네이루를 

36
00:01:56,070 --> 00:02:01,825
우리 코드의 일부가 되도록 추가해줘야 합니다.

37
00:02:01,825 --> 00:02:07,205
일부 요구 사항을 되돌아보면,

38
00:02:07,205 --> 00:02:10,040
프로그램이 파일을 import 한 후 

39
00:02:10,040 --> 00:02:13,265
열어야만 합니다.

40
00:02:13,265 --> 00:02:18,945
이제 Rio De Janeiro에 관한 문자열을 추가해야 합니다.

41
00:02:18,945 --> 00:02:22,260
이 문자열을 파일의 끝부분에 추가해 주세요.

42
00:02:22,260 --> 00:02:25,670
즉, 쓰기 권한을 주는 방식으로

43
00:02:25,670 --> 00:02:31,635
파일을 열어야 한다는 의미입니다. 

44
00:02:31,635 --> 00:02:35,825
자 이제 계속 진행해서 column heading 부분을 봅시다.

45
00:02:35,825 --> 00:02:37,400
이전에 보았던 

46
00:02:37,400 --> 00:02:39,650
column 헤딩을 가져와야 합니다.

47
00:02:39,650 --> 00:02:43,720
바로 이부분에 나와있는 것이죠.

48
00:02:43,720 --> 00:02:46,820
이 문자열을 읽은 다음,

49
00:02:46,820 --> 00:02:51,200
목록에 split 해주면

50
00:02:51,200 --> 00:02:53,654
항목 0은 도시명,
51
00:02:53,654 --> 00:03:00,955
항목 1은 나라명....이런방식으로 계속되는 것을 볼 수 있습니다.

52
00:03:00,955 --> 00:03:04,400
첫 번째 문자열을 얻고,

53
00:03:04,400 --> 00:03:08,060
헤딩을 얻기 위해

54
00:03:08,060 --> 00:03:11,060
몇가지 절차를 거친 다음에는

55
00:03:11,060 --> 00:03:14,415
.readline()을 이용하여

56
00:03:14,415 --> 00:03:16,580
각 문자열을 읽으려고 합니다. 필수 요구사항인 부분이죠.

57
00:03:16,580 --> 00:03:19,100
그래서.... 문자열을 읽을 수 있는 상태가 계속되는 한

58
00:03:19,100 --> 00:03:22,150
계속해서 반복을 진행해야합니다. 읽을수 있는 것이 남지 않을때까지 말입니다.

59
00:03:22,150 --> 00:03:26,750
그러고 나서, 우리는 그 내용을 split 해 줄 것입니다.

60
00:03:26,750 --> 00:03:28,940
그러고나서 city_temp[0]를 봅시다.

61
00:03:28,940 --> 00:03:31,130
우리가 문자열에서 처음 읽게 될 항목이 

62
00:03:31,130 --> 00:03:35,870
바로 인덱스0에 있게 됩니다.

63
00:03:35,870 --> 00:03:37,835
예를 들어, 도시 이름은 

64
00:03:37,835 --> 00:03:40,430
heading[0]에 의해 표현되죠.

65
00:03:40,430 --> 00:03:42,260
그래서 우리는 Beiging이라는 이름이 

66
00:03:42,260 --> 00:03:45,305
도시 이름이라는 것을 알 수 있습니다.

67
00:03:45,305 --> 00:03:46,790
이런식으로 계속 작업을 진행할 수 있습니다.

68
00:03:46,790 --> 00:03:48,560
예를 들어서,

69
00:03:48,560 --> 00:03:50,180
월별 최고 평균 기온이 바로

70
00:03:50,180 --> 00:03:53,150
2번째 목록이 되는 것처럼요.

71
00:03:53,150 --> 00:03:56,030
그러니까, 월별최고기온을 나타내는 숫자 30.9가 바로 두번째 항목이 될것입니다.

72
00:03:56,030 --> 00:03:59,210
자 뒤로 돌아가서 코드를 한번 살펴봅시다.

73
00:03:59,210 --> 00:04:03,512
이게 인덱스 0, 그리고 이것이 인덱스 1, 

74
00:04:03,512 --> 00:04:07,055
인덱스 2..... 또 이 부분이 인덱스 0, 인덱스 1 

75
00:04:07,055 --> 00:04:11,810
인덱스2..... 

76
00:04:11,810 --> 00:04:17,690
모든 필수 요구 코딩 요소들을 사용해야된다는 것을 명심하십시오.

77
00:04:17,690 --> 00:04:20,000
여기 있는 print 키워드는 출력을 위한 것이고,

78
00:04:20,000 --> 00:04:22,850
while은 루프를 위한 것입니다. 

79
00:04:22,850 --> 00:04:25,100
파일에서 읽어낼 수 있는 while 이고, 파일은 비어있지 않습니다.

80
00:04:25,100 --> 00:04:26,780
그리고 나서는 해당 read 문자열들을

81
00:04:26,780 --> 00:04:28,430
 split해서

82
00:04:28,430 --> 00:04:32,030
목록으로 만들어 주어야 합니다.

83
00:04:32,030 --> 00:04:34,010
이 작업을 하기 전에,

84
00:04:34,010 --> 00:04:36,545
파일을 open을 이용해 열고, .readline을 사용하고,

85
00:04:36,545 --> 00:04:40,635
파일의 앞부분으로 돌아가기 위해 .seek를 사용하고,

86
00:04:40,635 --> 00:04:44,675
파일의 뒤에 추가할 때 .write를 사용합니다.

87
00:04:44,675 --> 00:04:47,565
그리고 작업이 완료되면 .close를 사용해 파일을 닫습니다.

88
00:04:47,565 --> 00:04:49,820
따라서 이 모든 키워드가 

89
00:04:49,820 --> 00:04:53,015
풀이과정에 사용되게끔 코딩해 주십시오.

90
00:04:53,015 --> 00:04:57,290
그리고 코드가 올바르게 작동하고, 적절한 출력값을 내는지도 확인하십시오.

91
00:04:57,290 --> 00:05:00,973
그렇지 않으면 여러분이 제출한 코드는 오답으로 처리될 것입니다.

92
00:05:00,973 --> 00:05:03,470
다시 말하지만, 이 모든 항목이 코드에 

93
00:05:03,470 --> 00:05:07,730
포함되어 있는지 확인하십시오. 행복한 코딩 되시길 바랍니다.

