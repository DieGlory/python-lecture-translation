0
00:00:04,258 --> 00:00:07,920
readlines() 메소드를 사용해서 텍스트 파일을 list 형태로 열 수 있습니다

1
00:00:09,450 --> 00:00:10,850
이번 예제에서

2
00:00:10,851 --> 00:00:16,010
시를 이미 jupyter notebook으로 가져왔습니다.

3
00:00:16,011 --> 00:00:20,740
그리고 시를 연다음에 poem1 변수에 할당해 보겠습니다

4
00:00:20,741 --> 00:00:24,610
이건 읽기전용으로 읽겠다는 의미고

5
00:00:24,611 --> 00:00:30,630
readlines() 메소드를 파일의 인스턴스에 사용할 겁니다

6
00:00:30,631 --> 00:00:35,155
readlines ()는 텍스트 파일의 각 행을 

7
00:00:35,156 --> 00:00:38,875
list 항목으로 읽습니다.

8
00:00:38,876 --> 00:00:42,252
코드를 실행하고 어떻게 보이는지 봅시다. 

9
00:00:42,253 --> 00:00:46,160
그리고 여기에 문자열로 구성된 list가 있습니다. 

10
00:00:46,161 --> 00:00:51,070
list 항목을 구분하기 위한 

11
00:00:51,071 --> 00:00:55,500
개행문자가 각 줄별로 포함되어 있습니다. 

12
00:00:55,501 --> 00:00:59,940
이런 문자들은 제거되지 않고 그대로 포함되어 있습니다.

13
00:00:59,941 --> 00:01:05,420
그래서 새로 만든 poem_lines를 이용해서

14
00:01:05,421 --> 00:01:09,190
매라인 별로 출력할 때,

15
00:01:09,191 --> 00:01:14,660
이때 poem_lines는 readlines 메소드를 이용해서 만든겁니다.

16
00:01:14,661 --> 00:01:19,650
그러니 계속 진행해보고 print 함수에서 기본으로 

17
00:01:19,651 --> 00:01:26,950
개행문자가 사용됨을 알 수 있습니다. 

18
00:01:26,951 --> 00:01:29,630
문자열에는 개행문자가 있고,

19
00:01:29,631 --> 00:01:32,840
추가적인 개행문자가 들어가 있죠

20
00:01:32,841 --> 00:01:35,910
여러분은 readlines() 메소드를 사용할때,

21
00:01:35,911 --> 00:01:39,710
개행 문자에서 멈추고,

22
00:01:40,740 --> 00:01:45,040
각 문자열의 끝에는

23
00:01:45,041 --> 00:01:46,640
개행 문자가 같이 저장된다는 것을 이해하셔야 합니다

24
00:01:47,870 --> 00:01:52,790
readlines 메소드를 사용해서 전체 텍스트파일을 list 형태로 읽을 수 있습니다

