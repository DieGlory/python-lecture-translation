0
00:00:04,690 --> 00:00:08,700
우리는 빠르게 숫자로된 시퀀스를 만들 수 있습니다

1
00:00:08,720 --> 00:00:11,910
바로 range 함수와 stop 값을 이용해서 말이죠

2
00:00:11,930 --> 00:00:13,920
지금 보면, 가장 간단한 range 함수 형태인

3
00:00:13,940 --> 00:00:16,110
매개변수로 stop 값 하나만 갖는

4
00:00:16,130 --> 00:00:20,040
range 함수가 있습니다

5
00:00:20,060 --> 00:00:22,820
range 함수는 기본적으로

6
00:00:22,840 --> 00:00:25,290
0부터 시작하는 시퀀스를 만들어 줍니다

7
00:00:25,310 --> 00:00:27,250
매개변수를 1개만 넣으면 말이죠. 

8
00:00:27,270 --> 00:00:32,520
한번 실행해보겠습니다. 보면 

9
00:00:32,540 --> 00:00:36,900
시작값이 0이고, 정지값이 10이라고 나오네요

10
00:00:36,920 --> 00:00:41,200
그래서 실제로는 0부터 9까지이고, 이걸 실제로 볼 수 있는 방법은

11
00:00:41,220 --> 00:00:44,820
list로 캐스팅하는 겁니다

12
00:00:44,840 --> 00:00:48,420
통상적으로 range 함수는 이런식으로 list를

13
00:00:48,440 --> 00:00:52,379
만드는데 사용하는게 일반적인 사용법이며

14
00:00:52,390 --> 00:00:54,929
아래처럼 반복문을 사용할 때 주로 씁니다.

15
00:00:54,940 --> 00:00:59,370
그래서 이 경우에는 for/in 반복문을 사용하고,

16
00:00:59,390 --> 00:01:03,239
반복문에서 range 함수가 

17
00:01:03,250 --> 00:01:07,080
list로 캐스팅 되지 않은 경우에도

18
00:01:07,100 --> 00:01:09,120
동일하게 시퀸스를 

19
00:01:09,140 --> 00:01:12,630
만들어 준다는 것을 알 수 있습니다

20
00:01:12,650 --> 00:01:14,640
그럼 한번 살펴보고

21
00:01:14,660 --> 00:01:20,370
list의 각 항목이 실제로 어떻게 작동 되는지

22
00:01:20,390 --> 00:01:23,250
출력해서 알아보겠습니다

23
00:01:23,270 --> 00:01:26,760
range 함수가 list와 

24
00:01:26,780 --> 00:01:32,310
동일하게 작동한다는 것을 알 수 있습니다

25
00:01:32,330 --> 00:01:35,730
왜냐하면 우리가 실제로 넣어보면

26
00:01:35,750 --> 00:01:40,470
같은 결과 값이 나오기 때문이죠

27
00:01:40,490 --> 00:01:44,250
우리는 이걸 이용해서 매 반복문마다

28
00:01:44,270 --> 00:01:47,070
빠르게 숫자를 사용하는 list 객체들을 만들 수 있습니다.

29
00:01:47,090 --> 00:01:51,480
다음 예제를 보면,

30
00:01:51,500 --> 00:01:54,900
digit에 범위 값을 할당한 다음,

31
00:01:54,920 --> 00:01:57,900
이 숫자들을 list 형태로 출력할겁니다

32
00:01:57,920 --> 00:02:01,140
여기 sub_total 변수를 만들고, 

33
00:02:01,160 --> 00:02:03,600
0으로 초기화 해주었습니다

34
00:02:03,620 --> 00:02:06,300
그래서 digit 리스트를 루프로 돌리면서

35
00:02:06,320 --> 00:02:08,760
임의의 항목들을 만들고,

36
00:02:08,780 --> 00:02:12,269
0부터 9까지의 모든 

37
00:02:12,280 --> 00:02:15,810
digit값을 더하고

38
00:02:15,830 --> 00:02:19,240
sub_total과 total의 값을 출력해볼겁니다

39
00:02:19,260 --> 00:02:25,180
코드를 실행해보면, list가 캐스팅된걸 확인 할 수 있네요

40
00:02:25,200 --> 00:02:27,880
range 함수로 만든 객체가 list로 캐스팅 되었고

41
00:02:27,900 --> 00:02:34,600
그리고 sub_total이 0.. 1... 2를 더해 3.. 3을 더해

42
00:02:34,620 --> 00:02:40,270
6이 되고, 45가 되었네요

43
00:02:40,290 --> 00:02:43,630
마지막 예제에서는 range 함수를 이용해서

44
00:02:43,650 --> 00:02:46,000
여기 있는 list를 반복문에 써볼 거고,

45
00:02:46,020 --> 00:02:49,900
spell_list는 절기나 날짜에 관련된 내용입니다

46
00:02:49,920 --> 00:02:53,020
뭐 그냥 문자열 list일 뿐이죠

47
00:02:53,040 --> 00:02:54,820
그래서 우리는 spell_list의 길이를

48
00:02:54,840 --> 00:02:57,580
잰 다음에, 

49
00:02:57,600 --> 00:03:00,100
2로 나눠주겠습니다

50
00:03:00,120 --> 00:03:02,230
그리고 int로 캐스팅하면

51
00:03:02,250 --> 00:03:05,290
list의 길이의 절반이 되는 거죠

52
00:03:05,310 --> 00:03:08,560
그래서 우리는 0에서 부터 시작해서

53
00:03:08,580 --> 00:03:11,440
중간 지점에서 멈출 겁니다

54
00:03:11,460 --> 00:03:13,960
코드를 실행해보니 중간지점이 3이라고 나오네요

55
00:03:13,980 --> 00:03:16,540
그래서 range 함수가 

56
00:03:16,560 --> 00:03:21,010
정지값이 3으로 만들어지고,

57
00:03:21,030 --> 00:03:24,970
index 0, 1, 2로 list가 만들어집니다

58
00:03:24,990 --> 00:03:29,650
우리는 range 함수를 

59
00:03:29,670 --> 00:03:31,870
1개의 매개변수로 사용할 수 있습니다

60
00:03:31,890 --> 00:03:34,630
이 1개의 매개변수는 정지값이며, 숫자로된 시퀸스를 만들고,

61
00:03:34,650 --> 00:03:39,990
반복문에서 주로 사용됩니다

