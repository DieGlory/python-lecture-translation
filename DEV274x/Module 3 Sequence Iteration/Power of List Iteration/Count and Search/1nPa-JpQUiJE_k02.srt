0
00:00:04,311 --> 00:00:08,155
문자열 내에서 문자 또는 하위 문자열을 찾으려면 

1
00:00:08,200 --> 00:00:12,044
count 메소드를 사용할 수 있습니다. 

2
00:00:12,155 --> 00:00:14,577
이번예시에서는,

3
00:00:14,666 --> 00:00:18,688
cities 라는 문자열 list가 있으며,

4
00:00:18,755 --> 00:00:20,840
각각의 문자열 원소는 도시 이름입니다

5
00:00:20,955 --> 00:00:23,866
뉴욕, 맨해튼, 상하이 기타 등등이 있네요

6
00:00:23,977 --> 00:00:25,940
그리고 여기 search_letter라는 변수가 있고,

7
00:00:26,040 --> 00:00:29,088
소문자 a를 초기값으로 설정해두겠습니다

8
00:00:29,155 --> 00:00:30,333
왜냐하면 이건 저희가 찾으려는 타겟이 되고,

9
00:00:30,410 --> 00:00:32,355
count 메소드를 이용해서 검색해볼 거기 때문이죠

10
00:00:32,444 --> 00:00:34,377
우리는 카운터가 있고,

11
00:00:34,460 --> 00:00:37,000
현재 값은 0입니다.

12
00:00:37,133 --> 00:00:39,977
이 예제에서는, count 메소드를 사용해 볼 겁니다,

13
00:00:40,066 --> 00:00:43,120
익숙한 for/in 반복문을 사용해서

14
00:00:43,200 --> 00:00:46,570
list와 list 내의 도시이름들을 

15
00:00:46,688 --> 00:00:48,866
가지고 처리해 보겠습니다

16
00:00:48,930 --> 00:00:53,533
그리고 city_name이라는 임의의 이름을 가진 변수를 만들어서

17
00:00:53,666 --> 00:00:58,060
각 루프마다 반환값을 가지고 루프하게 만들겁니다

18
00:00:58,155 --> 00:01:00,555
첫번째는 뉴욕, 두번째는 상하이 이런식으로 말이죠

19
00:01:00,666 --> 00:01:05,133
0에서 시작하는 total 변수는

20
00:01:05,200 --> 00:01:07,155
count 메소드가 반환하는 정수를 더하게 됩니다

21
00:01:07,266 --> 00:01:10,822
count 메소드는

22
00:01:10,933 --> 00:01:14,222
얼마나 많은 하위 문자열이

23
00:01:14,311 --> 00:01:15,380
이 케이스에 있는지 알려줄거고, 우리는

24
00:01:15,511 --> 00:01:18,980
a가 몇개 있는지 확인해 볼겁니다

25
00:01:19,066 --> 00:01:21,140
그래서 뉴욕에서는 일치하는 문자가 없어서

26
00:01:21,244 --> 00:01:23,270
0을 반환하고

27
00:01:23,400 --> 00:01:26,630
상하이의 경우 2를 반환합니다

28
00:01:26,750 --> 00:01:30,133
루프를 다 돈다음

29
00:01:30,222 --> 00:01:32,933
total을 가져와서

30
00:01:33,066 --> 00:01:37,066
출력하기만 하면 됩니다

31
00:01:37,155 --> 00:01:41,933
코드를 실행해 봅시다.

32
00:01:42,044 --> 00:01:47,400
total이 6인걸 확인할 수 있습니다

33
00:01:47,511 --> 00:01:51,311
그리고 우리가 루프 내에 print 함수를 추가하면,

34
00:01:51,400 --> 00:01:53,600
total이 어디서 얼마나 추가되고 있는지 확인 할 수 있습니다

35
00:01:53,711 --> 00:01:57,333
처음 뉴욕은 일치되는 문자가 없어서 0이고

36
00:01:57,422 --> 00:02:01,400
상하이에서 total이 2가 되고

37
00:02:01,511 --> 00:02:04,460
뮌헨과 도쿄에서는 2가 유지되고

38
00:02:04,533 --> 00:02:06,977
두바이에서는 1이 추가되서 3이되네요

39
00:02:07,040 --> 00:02:10,466
우리는 count 메소드를 사용해서

40
00:02:10,555 --> 00:02:14,600
list 항목별로 검사할 수 있고

41
00:02:14,733 --> 00:02:18,488
문자열에서 하위 문자열의 개수를 확인할 수 있습니다

42
00:02:18,577 --> 00:02:20,955
저희가 a의 개수를 확인한 것 처럼 말이죠

