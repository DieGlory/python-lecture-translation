0
00:00:04,148 --> 00:00:07,190
리스트를 반복할 때 공통적인 패턴은 

1
00:00:07,191 --> 00:00:10,770
연산자를 정렬 및 필터링하도록 비교하는 것입니다. 

2
00:00:10,771 --> 00:00:13,510
이 예에서는 foot_bones를 만듭니다. 

3
00:00:13,511 --> 00:00:18,950
그것은 뼈와 문자열의 목록입니다.

4
00:00:18,951 --> 00:00:22,510
그러고 나서 빈 문자열인 longer_names와 short_name인 두 가지 변수가 있습니다. 

5
00:00:22,511 --> 00:00:27,500
우리는 이들 각각을 리스트 중 

6
00:00:27,501 --> 00:00:31,080
하나에 할당할 것입니다. 

7
00:00:31,081 --> 00:00:33,770
그래서 각 뼈 이름은 

8
00:00:33,771 --> 00:00:39,240
제 임의의 이름입니다.

9
00:00:39,241 --> 00:00:44,590
이 이름은 루프에 있는 for, 목록의 foot_bones, 이름은 bone입니다. 

10
00:00:44,591 --> 00:00:49,374
문자열 bonename의 길이가 10보다 작으면

11
00:00:49,375 --> 00:00:55,400
새 줄 ( &amp;quot;\\ n&amp;quot;)의 

12
00:00:55,401 --> 00:01:00,780
서식 지정 문자로 short_names 목록에 추가할 것입니다. 

13
00:01:00,781 --> 00:01:05,210
그렇지 않고 10보다 작지 않으면 긴 이름이어야 합니다. 

14
00:01:05,211 --> 00:01:07,630
그리고 우리는 이것을 longer_name 리스트에 넣을 것이고, 

15
00:01:07,631 --> 00:01:08,280
그것을 실행할 수 있습니다. 

16
00:01:09,420 --> 00:01:12,640
그리고 그것을 출력하여 두 개의 다른 문자열로 

17
00:01:12,641 --> 00:01:16,730
이름을 올리는 것을 볼 수 있습니다. 

18
00:01:16,731 --> 00:01:21,720
자, 문자열에 넣는 것은 서식을 설정하는 데 유용 할 수 있습니다. 

19
00:01:21,721 --> 00:01:26,155
다른 작업에서는 longer_names 및 sorter_names를 목록에 

20
00:01:26,156 --> 00:01:31,710
넣으면 다른 작업에서도 사용할 수 있습니다. 

21
00:01:31,711 --> 00:01:38,411
그래서 우리는 문자열의 길이를 사용하여 정렬할 것입니다. 

22
00:01:38,412 --> 00:01:42,246
그리고 이번에는 append를 사용하고의 빈 리스트에 long_names 

23
00:01:42,247 --> 00:01:46,500
또는 empty nest, short_names를 추가할 것입니다. 

24
00:01:46,501 --> 00:01:50,010
그런 다음 매번 그 목록에 추가되기 시작합니다. 

25
00:01:50,011 --> 00:01:52,140
그리고 마지막에 새 항목을 

26
00:01:52,141 --> 00:01:53,860
넣은 다음 목록을 출력합니다. 

27
00:01:53,861 --> 00:01:55,580
그래서 우리는 계속해서 이렇게 할 것입니다. 

28
00:01:55,581 --> 00:02:00,915
그래서 우리는 short_names와 long_names 중 하나의 목록을 가지고 있다는 것을 알 수 있습니다. 

29
00:02:01,990 --> 00:02:06,840
반복 작업을 수행하는 동안 정렬 및 필터링할 수 있습니다. 

