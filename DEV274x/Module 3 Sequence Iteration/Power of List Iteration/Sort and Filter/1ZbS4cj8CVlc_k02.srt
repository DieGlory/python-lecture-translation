0
00:00:04,148 --> 00:00:07,190
통상적으로 list를 반복문과 같이 쓸때, 

1
00:00:07,191 --> 00:00:10,770
연산자를 이용해서 list내의 항목을 정렬하거나, 원하는 항목만 추출하는 작업을 많이 합니다

2
00:00:10,771 --> 00:00:13,510
이번 예시에서는 foot_bones를 일단 만들겁니다

3
00:00:13,511 --> 00:00:18,950
이건 뼈들의 이름을 문자열 list로 만든 거고,

4
00:00:18,951 --> 00:00:22,510
그리고 우리는 2개의 longer_names와 short_names 변수를 가지고 있습니다 

5
00:00:22,511 --> 00:00:27,500
우리는 foot_bones에 있는 뼈들을 longer_names나 short_names 둘 중에

6
00:00:27,501 --> 00:00:31,080
하나에만 할당에 줄 겁니다 

7
00:00:31,081 --> 00:00:33,770
각 뼈의 이름은

8
00:00:33,771 --> 00:00:39,240
for/in 루프에서 제가 임의로 만든 bone_name에 들어가게 될겁니다

9
00:00:39,241 --> 00:00:44,590
foot_bones 라는 이름의 list에서 말이죠

10
00:00:44,591 --> 00:00:49,374
만약 뼈 이름의 길이가

11
00:00:49,375 --> 00:00:55,400
10글자 보다 짧을 경우, 저는 

12
00:00:55,401 --> 00:01:00,780
short_names list에 개행문자 ("\n") 와 함께 추가 해 줄겁니다

13
00:01:00,781 --> 00:01:05,210
그렇지 않고 길이가 10 이상일 경우, 긴 이름이겠죠? 

14
00:01:05,211 --> 00:01:07,630
그러면 뼈 이름을 longer_name list에 넣을 것이고, 

15
00:01:07,631 --> 00:01:08,280
실행해 보겠습니다

16
00:01:09,420 --> 00:01:12,640
출력해보면 2개의 문자열 list로 

17
00:01:12,641 --> 00:01:16,730
분류된 것을 알 수 있습니다

18
00:01:16,731 --> 00:01:21,720
문자열 list에 넣는건, 특정 형식으로 만드는데 도움이 된다는 뜻입니다

19
00:01:21,721 --> 00:01:26,155
longer_names 및 sorter_names를 다른 연산자를 써서

20
00:01:26,156 --> 00:01:31,710
넣으면 다른 작업에서도 사용할 수 있습니다. 

21
00:01:31,711 --> 00:01:38,411
문자열의 길이를 기준으로 정렬해볼겁니다. 

22
00:01:38,412 --> 00:01:42,246
그리고 이번에는 append  메소드를 사용하여

23
00:01:42,247 --> 00:01:46,500
비어있는 shorter_names랑 longer_names에 추가해줄 겁니다

24
00:01:46,501 --> 00:01:50,010
그리고 이제 반복문이 돌면서 list에 추가되기 시작하고

25
00:01:50,011 --> 00:01:52,140
새로운 항목이 들어가고,

26
00:01:52,141 --> 00:01:53,860
마지막에 list를 출력합니다

27
00:01:53,861 --> 00:01:55,580
한번 실행해보죠

28
00:01:55,581 --> 00:02:00,915
그래서 우리는 2개의 문자열 list인 short_names와 long_names을 가직 있는걸 확인할 수 있고,

29
00:02:01,990 --> 00:02:06,840
반복문을 돌면서 정렬하고, 필터링할 수 있습니다

