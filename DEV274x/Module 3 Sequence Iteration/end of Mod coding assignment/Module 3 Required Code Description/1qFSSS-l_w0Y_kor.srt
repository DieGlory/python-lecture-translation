0
00:00:00,350 --> 00:00:05,745
모듈3의 필수 코딩 액티비티에 오신 것을 환영합니다.

1
00:00:05,745 --> 00:00:09,540
이번 액티비티에서는 시(poem) 믹서를 만들어 볼 것입니다.

2
00:00:09,540 --> 00:00:11,435
이것은 edX 페이지인데요,

3
00:00:11,435 --> 00:00:12,960
이 부분에서 우리에게 주어진

4
00:00:12,960 --> 00:00:14,970
과제의 주요 요구사항과,

5
00:00:14,970 --> 00:00:17,385
몇가지 더 자세한 요구사항들,

6
00:00:17,385 --> 00:00:20,700
그리고 시 믹서의 기능적 요구사항들을 확인하실 수 있습니다.

7
00:00:20,700 --> 00:00:26,625
이 부분은 플로우차트도 포함되어있는데, 이것을 보고 프로그램 로직과

8
00:00:26,625 --> 00:00:33,545
어떻게 단어 믹서 기능을 실행해야 하는지를 알 수 있습니다.

9
00:00:33,545 --> 00:00:36,855
이같은 내용이 모두 포함되어 있는

10
00:00:36,855 --> 00:00:39,555
edX 페이지를 살펴봅시다. 

11
00:00:39,555 --> 00:00:42,531
그러면 제가 미리 로드해둔 프코드를 실행할 수 있습니다.

12
00:00:42,531 --> 00:00:45,940
자, 이제 먼저 시를 입력해줘야합니다. 

13
00:00:45,940 --> 00:00:48,360
그러니 위에 주어져있는 

14
00:00:48,360 --> 00:00:53,870
블레이크의 시를 입력해주도록 합시다.

15
00:00:53,870 --> 00:00:58,050
시가 성공적으로 입력되었음을 알 수 있습니다. 

16
00:00:58,050 --> 00:01:00,925
그러고 나면 시 믹서가 시에서 나오는

17
00:01:00,925 --> 00:01:04,990
대부분 단어를 가져와서

18
00:01:04,990 --> 00:01:09,130
글자수가 더 긴 항목들을 대문자로 만들고,

19
00:01:09,130 --> 00:01:16,720
다른 항목은 소문자로 만듭니다. 

20
00:01:16,720 --> 00:01:18,700
이제 코드를 구조화하는 

21
00:01:18,700 --> 00:01:24,890
방법에 대해 살펴보겠습니다. 

22
00:01:26,400 --> 00:01:32,145
왼쪽에는 두 개의 플로우차트가 있습니다. 

23
00:01:32,145 --> 00:01:34,385
프로그램 로직부터 살펴보도록 하죠.

24
00:01:34,385 --> 00:01:38,455
먼저 '문자열을 삽입'(get string input)하고,

25
00:01:38,455 --> 00:01:41,990
다음으로 그 문자열을 

26
00:01:41,990 --> 00:01:45,620
words_list라는 목록에 나눕니다. 

27
00:01:45,620 --> 00:01:49,925
그 다음 목록의 길이를 알아 낼 것인데 

28
00:01:49,925 --> 00:01:54,970
이는 얼마나 많은 단어, 또는 단어의 조각들이 있는지 알기 위해서입니다.

29
00:01:54,970 --> 00:01:56,510
이번에는 공백을 써서 나누어 줄 것이지만,

30
00:01:56,510 --> 00:01:59,825
구두점을 사용해도 상관 없습니다.

31
00:01:59,825 --> 00:02:02,300
그런 다음 한 번에 한 단어씩

32
00:02:02,300 --> 00:02:04,995
반복하여 작업하겠습니다. 

33
00:02:04,995 --> 00:02:10,355
그리고 나서 [index] 내에 있는 단어가

34
00:02:10,355 --> 00:02:17,300
짧은 단어인지 아닌지를 테스트 해서 알아보겠습니다.

35
00:02:17,300 --> 00:02:20,945
만약 짧은 단어라면 소문자로 만들고,
36
00:02:20,945 --> 00:02:22,580
다시 위로 돌아가서 
37
00:02:22,580 --> 00:02:24,680
다른 단어에 대해 작업할 것입니다.

38
00:02:24,680 --> 00:02:30,910
만약 짧은 단어가 아니거나 else if 에 해당한다면,

39
00:02:30,910 --> 00:02:32,215
그러니까 만약 긴 단어라면,

40
00:02:32,215 --> 00:02:34,620
그 단어들은 모두 대문자로 만들 것입니다. 

41
00:02:34,620 --> 00:02:39,550
그리고 다시 되돌아가서 다른 단어에 대해 작업합니다.

42
00:02:39,550 --> 00:02:40,810
그리고 더 작업할 단어가 남지 않으면,

43
00:02:40,810 --> 00:02:43,415
word_mixe를 호출합니다.

44
00:02:43,415 --> 00:02:45,390
목록이 있으면,

45
00:02:45,390 --> 00:02:48,490
우리는 그 목록에 있는 단어의 문자의 대소 여부를 바꾸고 있긴 하지만

46
00:02:48,490 --> 00:02:52,535
목록 그 자체는 그대로 유지하고 있습니다. 

47
00:02:52,535 --> 00:02:57,620
word_list를 word_mixer에 전달하면

48
00:02:57,620 --> 00:03:04,780
word_mixer가 새로운 목록을 반환해줍니다.

49
00:03:04,780 --> 00:03:06,800
그러면 우리는 그 목록에 있는 

50
00:03:06,800 --> 00:03:09,040
각 단어를 출력하고, 반복을 끝낼 것입니다. 

51
00:03:09,040 --> 00:03:13,695
word_mixer 함수에 목록이 전달됩니다. 

52
00:03:13,695 --> 00:03:18,795
정렬 메소드를 사용하여 목록을 정렬합니다. 

53
00:03:18,795 --> 00:03:24,665
그리고 목록에 여섯 개 이상의 단어가 있다면,

54
00:03:24,665 --> 00:03:29,455
즉, '목록에 있는 단어의 수 > 5' 가 성립하면,

00:03:29,455 --> 00:03:34,776
목록 끝에서 5번째에 있는 요소를 끄집어 낼(pop) 것입니다.

56
00:03:34,776 --> 00:03:38,535
우리는 가장 마지막에 있는 항목이

57
00:03:38,535 --> 00:03:44,460
마이너스1 ( -1 )으로 표시된다는 것을 알고 있습니다. 

58
00:03:44,460 --> 00:03:47,670
뒤에서 두번째 항목은 마이너스2 (-2)로 표시되구요.

59
00:03:47,670 --> 00:03:50,264
그래서, 마지막에서부터 다섯번째 항목을 얻게 됩니다.

60
00:03:50,264 --> 00:03:53,740
우리는 목록의 길이가 6이기 때문에 이 로직되로 작동된다는 것을 알고 있습니다.

61
00:03:53,740 --> 00:03:58,760
그러고 나서 우리는 리스트에서 첫 번째 단어를 끄집어 낼 것입니다.

62
00:03:58,760 --> 00:04:00,830
인덱스를 보시면 0이 있습니다.

63
00:04:00,830 --> 00:04:05,110
따라서 이들이 각각 새 단어들에 추가됩니다.

64
00:04:05,110 --> 00:04:07,960
마지막으로 마지막 항목을 끄집어 내 옵니다.

65
00:04:07,960 --> 00:04:10,040
-1로 설정해 줍니다.

66
00:04:10,040 --> 00:04:12,957
그리고 여전히 목록에 5개가 존재하는지 확인합니다.

67
00:04:12,957 --> 00:04:16,249
5개 이상이 존재한다면 이 작업을 계속 반복하고,

68
00:04:16,249 --> 00:04:17,740
다섯 개 이하가 있다면 종료 한 후

69
00:04:17,740 --> 00:04:21,040
새로운 단어를 반환합니다. 

70
00:04:21,040 --> 00:04:26,935
그런 다음 여기에서 반환된 내용을 출력할 수 있습니다.

71
00:04:26,935 --> 00:04:28,795
그러면 이것이 우리 프로그램이 될 것입니다. 

72
00:04:28,795 --> 00:04:32,190
그리고 알아두실 것은,

73
00:04:32,190 --> 00:04:35,660
출력이 다음과 같은 가장 쉬운 방식으로

74
00:04:35,660 --> 00:04:38,295
똑바로 될 수 있다는 것입니다.

75
00:04:38,295 --> 00:04:41,630
아니면 한 번에 3개의 단어를 출력하는

76
00:04:41,630 --> 00:04:45,140
 루프 방법을 찾아 볼 수도 있습니다.

77
00:04:45,140 --> 00:04:47,930
물론 여러분이 이 방법도 시도해보고 싶다면 말이지요.

78
00:04:47,930 --> 00:04:52,244
자, 이번에 우리는 "／n"이 줄바꿈 문자라는 것을 알고 있습니다.

79
00:04:52,244 --> 00:04:57,760
새로운 줄바꿈 지점을 나타내는 문자이지요. 

80
00:04:57,760 --> 00:04:59,145
만약 매 3번째 단어에마다 줄바꿈을 넣을수 있다면, 

81
00:04:59,145 --> 00:05:02,075
다음과 같은 방식으로

82
00:05:02,075 --> 00:05:05,455
한번에 3개 단어씩 출력 할 수 있게 되겠죠.

83
00:05:05,455 --> 00:05:11,520
키워드 요구 사항을 살펴보겠습니다. 

84
00:05:11,520 --> 00:05:13,220
우리는 함수를 만들고 있으므로 

85
00:05:13,220 --> 00:05:15,215
def 문이 필요합니다.

86
00:05:15,215 --> 00:05:18,140
이 함수는 반환 값을 가지고 있습니다. 

87
00:05:18,140 --> 00:05:20,360
우리는 결과를 출력해야 합니다.

88
00:05:20,360 --> 00:05:23,900
우리는 모두 if 문을 포함하는 조건부 로직을 사용해야 합니다,
89
00:05:23,900 --> 00:05:26,533
우리는 사용자로부터 입력값을 모아야 합니다

90
00:05:26,533 --> 00:05:30,885
즉 시 또는 명언을 모으고 있는 것이죠.

91
00:05:30,885 --> 00:05:34,035
우리는 for / in 루프를 사용하여 

92
00:05:34,035 --> 00:05:38,330
목록에 대해 반복하고, 목록 내의 각 항목을 가져와야 합니다.

93
00:05:38,330 --> 00:05:41,490
우리는 적절한 방법(method)을 사용하여 문자열을 

94
00:05:41,490 --> 00:05:45,405
모두 소문자 또는 모두 대문자로 만들어야 합니다.

95
00:05:45,405 --> 00:05:47,357
그리고 목록에 대한 사항을 살펴봅시다.

96
00:05:47,357 --> 00:05:50,020
우리는 목록의 끝에 추가(append)를 시행해야 합니다.

97
00:05:50,020 --> 00:05:51,885
우리는 목록에서 리스트 요소 끄집어내기(pop)를 시행해야 합니다.

98
00:05:51,885 --> 00:05:57,540
그리고 문자열을 나누어(split) 목록을 만들어야 합니다.

99
00:05:57,540 --> 00:06:02,425
목록의 길이를 찾아야 합니다.

100
00:06:02,425 --> 00:06:06,030
범위 함수를 사용하여,

101
00:06:06,030 --> 00:06:11,130
목록에 대한 인덱스로 사용할 숫자를 생성해 내야 합니다.

102
00:06:11,130 --> 00:06:14,085
꼭 코드를 테스트해 보셔서, 키워드들이 모두 포함되었는지 확인하는 것 잊지 마세요!

103
00:06:14,085 --> 00:06:18,580
그럼...즐코딩 시간 되십시오.

