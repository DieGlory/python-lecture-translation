0
00:00:04,163 --> 00:00:07,463
다음은 스트링을 사용할 때

1
00:00:07,464 --> 00:00:08,940
사용할 수 있는 유용한 책략입니다.

2
00:00:08,941 --> 00:00:12,610
첫 번째 문자열 책략을 위해 문자열을 목록에 넣을 것입니다.

3
00:00:12,611 --> 00:00:16,650
그래서 우리는 문자열 Hello를 가지고 있습니다. 이것을 리스트에 넣도록 하겠습니다.

4
00:00:18,460 --> 00:00:22,460
목록에 캐스팅하여 각 문자를 목록 항목으로

5
00:00:22,461 --> 00:00:26,170
가져오는 것을 볼 수 있습니다.

6
00:00:26,171 --> 00:00:31,820
위의 목록으로 캐스팅한 다음

7
00:00:31,821 --> 00:00:35,640
여기에 물결표와 함께 목록에 다시 참여합니다.

8
00:00:35,641 --> 00:00:38,000
어떻게 작동하는지 알 수 있습니다.

9
00:00:38,001 --> 00:00:41,690
실제로 문자열은 반복 가능한 항목이므로

10
00:00:41,691 --> 00:00:47,540
시퀀스가 아니므로 해설을 추가

11
00:00:47,541 --> 00:00:50,900
할 필요가 없는 추가 단계를 수행했습니다.

12
00:00:50,901 --> 00:00:57,560
그래서 우리는 넣을 수 있습니다, 우리는 어떤 문자열을

13
00:00:57,561 --> 00:01:01,638
넣을 수 있고 물결표 결합을 얻을 수 있습니다.

14
00:01:04,409 --> 00:01:08,820
새 라인은 print 문 끝의 기본값입니다.

15
00:01:08,821 --> 00:01:14,005
그리고 이 예제를 각 print 문 사이에

16
00:01:14,006 --> 00:01:19,393
새 줄을 만드는 대신 빈 문자열로

17
00:01:19,394 --> 00:01:22,011
실행하면 같은 줄에 그 줄이 유지됩니다.

18
00:01:24,165 --> 00:01:28,534
그래서, 여기에 나는 그 안에 긴 문자열을

19
00:01:28,535 --> 00:01:30,230
가진 마지막 문장을 가질 수 있음을 보여줍니다.

20
00:01:30,231 --> 00:01:32,920
예를 들어, 이 느낌표는 여기에 있습니다.

21
00:01:32,921 --> 00:01:35,220
그래서 우리는 항상 출력에 관해

22
00:01:35,221 --> 00:01:37,570
새로운 것을 배울 수 있습니다.

23
00:01:38,720 --> 00:01:42,817
이 마지막 예제에서 우리는 for 문을

24
00:01:42,818 --> 00:01:47,008
가지고 있고, 이 시퀀스는 문자열이고,

25
00:01:47,009 --> 00:01:50,197
Concatenation이며, 각 문자를 출력할 것입니다.

26
00:01:50,198 --> 00:01:54,418
하지만 다른 끝 기능을 사용하여 이 작업을 수행하고 싶습니다.

27
00:01:54,419 --> 00:02:00,450
그래서 예측은 별표가 각 문자 사이에

28
00:02:00,451 --> 00:02:02,170
추가될 것입니다, 하지만 그 밖의

29
00:02:02,171 --> 00:02:05,790
어떤 일이 일어날까요?

30
00:02:05,791 --> 00:02:08,410
개행 문자가 없으므로 같은 줄에 있을 것입니다.

31
00:02:08,411 --> 00:02:12,530
기본값과 같이 개행 문자를

32
00:02:12,531 --> 00:02:17,130
넣으면 세로나 가로로 출력됩니다.

33
00:02:17,131 --> 00:02:21,970
다시 한 번, 우리는 이것을 제거할 수 있습니다, 우리는 원하는 문자를

34
00:02:21,971 --> 00:02:25,150
넣을 수 있습니다. 그러나 개행 문자가 없으면 그들은 같은 줄에 있을 것입니다.

35
00:02:26,278 --> 00:02:29,340
이렇게 하면 코딩에 사용할 수 있는

36
00:02:29,341 --> 00:02:30,210
유용한 책략이 될 것입니다.

