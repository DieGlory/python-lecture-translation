0
00:00:00,150 --> 00:00:04,975
우리는 모듈 2의 필수 코딩 활동을 만들었고,

1
00:00:04,975 --> 00:00:07,945
이제는 list-o-matic을 빌드할 것입니다.

2
00:00:07,945 --> 00:00:10,830
인덱스 페이지에 있습니다.

3
00:00:10,830 --> 00:00:13,285
문제를 설명하는 순서도가

4
00:00:13,285 --> 00:00:18,125
있음을 알 수 있습니다.

5
00:00:18,125 --> 00:00:20,175
순서도의 두 부분이 있습니다

6
00:00:20,175 --> 00:00:22,850
프로그램의 본문과 목록에

7
00:00:22,850 --> 00:00:26,410
항목을 추가하고

8
00:00:26,410 --> 00:00:30,425
제거하는 list_o_matic 함수입니다.

9
00:00:30,425 --> 00:00:32,020
Jupyter Notebook을

10
00:00:32,020 --> 00:00:34,660
살펴보겠습니다.

11
00:00:34,660 --> 00:00:38,065
이건 동일한 정보를 가지고 있습니다.

12
00:00:38,065 --> 00:00:42,555
우리는 프로그램을 실행하고 어떻게 보이는지 볼 수 있습니다.

13
00:00:42,555 --> 00:00:45,155
여기에 몇 가지 코드를 미리 로드했습니다.

14
00:00:45,155 --> 00:00:47,650
이제 프로그램이 실행 중일

15
00:00:47,650 --> 00:00:50,660
때처럼 보일 것입니다.

16
00:00:50,660 --> 00:00:52,010
그래서 우리는 동물의 이름을

17
00:00:52,010 --> 00:00:53,410
입력 할 것이고 그것은

18
00:00:53,410 --> 00:00:57,535
현재 가지고있는 모든 동물을 보여줍니다.

19
00:00:57,535 --> 00:01:00,940
목록에있는 동물의

20
00:01:00,940 --> 00:01:02,400
이름을 추가하면 제거됩니다.

21
00:01:02,400 --> 00:01:04,435
새 이름을

22
00:01:04,435 --> 00:01:07,375
추가하면 목록에 추가됩니다.

23
00:01:07,375 --> 00:01:09,670
그래서 개를 추가 할 것입니다.

24
00:01:09,670 --> 00:01:11,790
그러면 개가 목록에 추가 된 것을 볼 수 있습니다.

25
00:01:11,790 --> 00:01:12,920
우리는 거기에 두 마리의 고양이를 가지고

26
00:01:12,920 --> 00:01:14,710
있으므로 다시 고양이를 추가 할 것입니다.

27
00:01:14,710 --> 00:01:16,915
고양이를 계속 제거한 다음

28
00:01:16,915 --> 00:01:22,190
종료 할 수 있습니다.

29
00:01:22,190 --> 00:01:25,320
인덱스 페이지로 돌아가서 플로우 차트를

30
00:01:25,320 --> 00:01:26,770
보면 프로그램의 주요 부분이

31
00:01:26,770 --> 00:01:31,565
있음을 알 수 있습니다.

32
00:01:31,565 --> 00:01:34,420
목록 맨 처음부터 시작됩니다.

33
00:01:34,420 --> 00:01:36,800
목록이 비어 있다고 말합니다.

34
00:01:36,800 --> 00:01:39,500
그래서 어떻게든 목록으로 시작하고 있으므로

35
00:01:39,500 --> 00:01:41,710
목록을 전달한 다음 목록이

36
00:01:41,710 --> 00:01:44,058
비어 있는지 확인해야합니다.

37
00:01:44,058 --> 00:01:49,645
그리고 비어 있으면 프로그램이 끝났고

38
00:01:49,645 --> 00:01:53,380
입력을 위해 quit을 쓰는 것처럼 종료합니다.

39
00:01:53,380 --> 00:01:55,146
그렇지 않다면 우리는 문자열 입력을 하게됩니다.

40
00:01:55,146 --> 00:01:56,290
그래서 고양이를 썼고

41
00:01:56,290 --> 00:01:58,900
목록에 고양이가 있다면

42
00:01:58,900 --> 00:02:01,030
확인하도록 합니다.

43
00:02:01,030 --> 00:02:03,385
그런 다음 우리는 그것을 제거하거나 목록에 없으면 추가합니다.

44
00:02:03,385 --> 00:02:06,895
하지만 먼저 입력이 종료되는지 확인합니다.

45
00:02:06,895 --> 00:02:10,330
그만두면 끝입니다.

46
00:02:10,330 --> 00:02:12,220
그렇지 않으면

47
00:02:12,220 --> 00:02:14,345
list_o_matic 함수를 호출합니다.

48
00:02:14,345 --> 00:02:18,345
list_o_matic 함수가 여기 위에 있습니다.

49
00:02:18,345 --> 00:02:23,485
list_o_matic 함수는 list의 인수와

50
00:02:23,485 --> 00:02:30,035
입력 된 항목을 취합니다.

51
00:02:30,035 --> 00:02:33,370
입력 문자열이 비어 있으면

52
00:02:33,370 --> 00:02:38,420
목록에서 마지막 항목을 팝합니다.

53
00:02:38,420 --> 00:02:41,065
문자열에 뭔가가 있으면

54
00:02:41,065 --> 00:02:43,975
목록에 이미 존재하는지 확인합니다.

55
00:02:43,975 --> 00:02:45,565
목록에 있는 경우

56
00:02:45,565 --> 00:02:52,285
해당 항목을 제거합니다.

57
00:02:52,285 --> 00:02:54,190
목록에 없는 경우

58
00:02:54,190 --> 00:02:57,005
목록의 끝에 추가합니다.

59
00:02:57,005 --> 00:02:59,040
이 모든

60
00:02:59,040 --> 00:03:02,665
경우에 우리는

61
00:03:02,665 --> 00:03:05,970
&quot;뭔가가 추가되거나 제거되었습니다.

62
00:03:05,970 --> 00:03:08,020
&quot; 앞으로 나아가서 되돌아봅시다.

63
00:03:08,020 --> 00:03:09,180
전화가 오면 메시지가

64
00:03:09,180 --> 00:03:10,750
다시 표시되어 메시지가

65
00:03:10,750 --> 00:03:13,270
출력되고 우리는 다시

66
00:03:13,270 --> 00:03:15,040
들어가서 목록에 남아있는

67
00:03:15,040 --> 00:03:16,705
것이 있는지 확인합니다.

68
00:03:16,705 --> 00:03:19,210
그리고 우리는 입력이 끝나기 전에

69
00:03:19,210 --> 00:03:23,845
입력을 계속하거나 비어있는 항목을 나열합니다.

70
00:03:23,845 --> 00:03:26,290
이제 이 프로젝트를 구축

71
00:03:26,290 --> 00:03:30,445
할 때 문제에 키워드가

72
00:03:30,445 --> 00:03:32,740
포함되도록 모든

73
00:03:32,740 --> 00:03:35,500
코드 작업에 필요한 요구 사항이 있습니다.

74
00:03:35,500 --> 00:03:39,005
그래서 우리는 반환 값을 가진 함수를 갖게 될 것입니다.

75
00:03:39,005 --> 00:03:41,320
따라서 def 키워드가 필요하고 돌아올 것입니다.

76
00:03:41,320 --> 00:03:46,000
반환 값도

77
00:03:46,000 --> 00:03:48,920
표시하므로 출력

78
00:03:48,920 --> 00:03:51,340
기능이 필요하며

79
00:03:51,340 --> 00:03:54,700
목록을 테스트하거나

80
00:03:54,700 --> 00:03:58,555
항목을 추가하거나 목록에서 제거하려면 항목을 입력해야합니다.

81
00:03:58,555 --> 00:04:00,040
그리고 나서, 우리는 약간의 논리를

82
00:04:00,040 --> 00:04:03,365
수행하고 if 문을 조건부로 사용합니다.

83
00:04:03,365 --> 00:04:06,475
항목에 실제로 존재하는 항목을

84
00:04:06,475 --> 00:04:10,720
검색하려면 in 키워드를 사용합니다.

85
00:04:10,720 --> 00:04:13,060
목록의 끝에 항목을

86
00:04:13,060 --> 00:04:15,370
추가하고 목록 끝에있는

87
00:04:15,370 --> 00:04:18,316
항목을 표시하며 목록에

88
00:04:18,316 --> 00:04:21,205
이미있는 특정 항목을 제거합니다.

89
00:04:21,205 --> 00:04:23,725
우리 프로그램을 다시 살펴보면,

90
00:04:23,725 --> 00:04:26,890
아무것도 추가하지 않으면 이전에

91
00:04:26,890 --> 00:04:28,390
테스트하지 않은 것을 다시

92
00:04:28,390 --> 00:04:30,370
테스트 할 수 있으며, 마지막 항목을 팝업해야합니다.

93
00:04:30,370 --> 00:04:32,035
따라서 테스트를 실행하여

94
00:04:32,035 --> 00:04:34,210
고양이가 제거되고 염소가 제거되어서

95
00:04:34,210 --> 00:04:37,315
목록에 아무 것도 없기 때문에

96
00:04:37,315 --> 00:04:38,945
자동으로 종료되는 것을

97
00:04:38,945 --> 00:04:40,915
확인해야합니다.

98
00:04:40,915 --> 00:04:43,120
그리고 목록의 끝에 도달 할 수있는

99
00:04:43,120 --> 00:04:46,885
다른 방법이 있습니다.

100
00:04:46,885 --> 00:04:49,985
저는 두 항목을 이동할 수 있습니다.

101
00:04:49,985 --> 00:04:51,220
그러나 남아있는 것이 하나있을 때

102
00:04:51,220 --> 00:04:53,210
고양이를 거기에 넣을 수 있습니다.

103
00:04:53,210 --> 00:04:56,885
그리고 저는 또한 고양이에 넣을 수 있다는

104
00:04:56,885 --> 00:04:59,390
것을 확인한 후에 추가 할 것입니다.

105
00:04:59,390 --> 00:05:03,855
하지만 그 두 가지를

106
00:05:03,855 --> 00:05:07,490
터트려면 내 목록은 비어 있습니다.

107
00:05:07,490 --> 00:05:10,335
프로그램의 두 부분을 빌드하십시오.

108
00:05:10,335 --> 00:05:17,060
로직을 사용하여 프로그램을 실행하여 입력 문자열을

109
00:05:17,060 --> 00:05:19,735
얻거나 종료 여부를 결정하십시오.

110
00:05:19,735 --> 00:05:23,630
또한 list-o-matic 함수를 빌드합니다.

111
00:05:23,630 --> 00:05:25,940
입력 문자열이 끝에서 팝하거나,

112
00:05:25,940 --> 00:05:28,085
명명 된 항목의

113
00:05:28,085 --> 00:05:32,330
특정 인스턴스를 제거하거나, 목록의

114
00:05:32,330 --> 00:05:35,030
끝에 추가해야하는지 여부를 확인합니다.

115
00:05:35,030 --> 00:05:37,835
그리고 각 요구 사항에

116
00:05:37,835 --> 00:05:43,290
맞는 키워드를 사용해야합니다. 행복한 코딩하세요.

