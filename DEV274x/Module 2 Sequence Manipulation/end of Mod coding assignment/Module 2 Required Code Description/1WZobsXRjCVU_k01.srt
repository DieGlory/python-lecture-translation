0
00:00:00,150 --> 00:00:04,975
모듈2의 필수 코딩 예제를 시작하겠습니다.

1
00:00:04,975 --> 00:00:07,945
이 예제에서 여러분은 list_o_matic을 빌드해야 합니다.

2
00:00:07,945 --> 00:00:10,830
edX 페이지를 살펴보면,

3
00:00:10,830 --> 00:00:13,285
문제를 설명하는 순서도가

4
00:00:13,285 --> 00:00:18,125
나와 있습니다.

5
00:00:18,125 --> 00:00:20,175
순서도가 두 종류가 있는데요,

6
00:00:20,175 --> 00:00:22,850
왼쪽 순서도는 프로그램의 메인 구조를 나타냅니다.

7
00:00:22,850 --> 00:00:26,410
오른쪽 순서도는 list_o_matic의 함수를 나타냅니다.
8
00:00:26,410 --> 00:00:30,425
이 함수는 리스트에 항목을 추가하거나 제거할때 사용됩니다.

9
00:00:30,425 --> 00:00:32,020
자 그럼, Jupyter Notebook을 살펴보는 것 부터

10
00:00:32,020 --> 00:00:34,660
시작해 보겠습니다.

11
00:00:34,660 --> 00:00:38,065
여기에도 동일한 정보가 나와있습니다.

12
00:00:38,065 --> 00:00:42,555
프로그램을 실행해보고, 어떤 모양으로 생겼는지 확인해 볼 수 있죠.

13
00:00:42,555 --> 00:00:45,155
여기에 제가 몇 가지 코드를 미리 로드해놨습니다.

14
00:00:45,155 --> 00:00:47,650
이제 프로그램을 실행해서,

15
00:00:47,650 --> 00:00:50,660
실행 중에는 어떤 모양으로 생겼는지 살펴봅시다.

16
00:00:50,660 --> 00:00:52,010
여기 enter the name of an animal: 부분을 보시면,

17
00:00:52,010 --> 00:00:53,410
현재 존재하는 동물들의 이름 목록을

18
00:00:53,410 --> 00:00:57,535
모두 화면에 보여주고 있습니다.

19
00:00:57,535 --> 00:01:00,940
만약 리스트 내에 이미 존재하는 동물의 이름을 추가하게되면,

20
00:01:00,940 --> 00:01:02,400
함수가 그 동물의 이름을 제거합니다.

21
00:01:02,400 --> 00:01:04,435
만약 새로운 동물 이름을 입력하게 되면,

22
00:01:04,435 --> 00:01:07,375
함수가 그 동물 이름을 리스트에 추가합니다.

23
00:01:07,375 --> 00:01:09,670
여기에다가 dog를 한번 추가해보겠습니다.

24
00:01:09,670 --> 00:01:11,790
그러면...이제 dog가 목록에 추가 된 것을 볼 수 있습니다.

25
00:01:11,790 --> 00:01:12,920
이 부분에는 cat 이 두개나 존재하고 있습니다.

26
00:01:12,920 --> 00:01:14,710
그러니 cat을 다시 한번 추가하도록 입력해보죠.

27
00:01:14,710 --> 00:01:16,915
그러면 cat이 목록에서 제거됩니다.

28
00:01:16,915 --> 00:01:22,190
다시 cat을 입력하면 다시한번 더 제거되구요. 이제 quit을 입력해 종료합니다.

29
00:01:22,190 --> 00:01:25,320
edX 페이지로 돌아가서

30
00:01:25,320 --> 00:01:26,770
순서도를 살펴보면,

31
00:01:26,770 --> 00:01:31,565
프로그램의 메인 구조가 써있는 것을 보실수 있습니다.

32
00:01:31,565 --> 00:01:34,420
맨 위부터 시작해서 순서도를 따라가보면

33
00:01:34,420 --> 00:01:36,800
list empty? 라고 묻고 있습니다.

34
00:01:36,800 --> 00:01:39,500
우리는 이미 목록을 다루고 있기 때문에,

35
00:01:39,500 --> 00:01:41,710
그 해당 목록을 패스한 다음

36
00:01:41,710 --> 00:01:44,058
목록이 비어있는지 아닌지 확인해야합니다.

37
00:01:44,058 --> 00:01:49,645
만약 목록이 비어 있으면 프로그램은 종료됩니다.

38
00:01:49,645 --> 00:01:53,380
quit을 입력했을 때와 같이 종료되죠.

39
00:01:53,380 --> 00:01:55,146
만약 목록이 비어있지 않으면 get string input 단계로 갑니다.

40
00:01:55,146 --> 00:01:56,290
가령 cat이라는 문자열을 썼는데

41
00:01:56,290 --> 00:01:58,900
목록에 cat이 존재한다면

42
00:01:58,900 --> 00:02:01,030
cat을 목록에서 제거할 것입니다.

43
00:02:01,030 --> 00:02:03,385
목록에 cat이 없다면, cat을 목록에 추가할 것입니다.

44
00:02:03,385 --> 00:02:06,895
하지만, 프로그램 순서상 먼저 입력값이 quit 인지를 체크하게끔 되어있군요.

45
00:02:06,895 --> 00:02:10,330
만약 입력값이 quit 이면, 프로그램은 종료됩니다.

46
00:02:10,330 --> 00:02:12,220
그렇지 않으면

47
00:02:12,220 --> 00:02:14,345
list_o_matic 함수를 호출합니다.

48
00:02:14,345 --> 00:02:18,345
list_o_matic 함수는 여기 오른쪽 순서도에 나와있습니다.

49
00:02:18,345 --> 00:02:23,485
list_o_matic 함수는 목록의 변수와, 

50
00:02:23,485 --> 00:02:30,035
입력값인 항목을 취합니다.

51
00:02:30,035 --> 00:02:33,370
입력 문자열이 비어 있으면

52
00:02:33,370 --> 00:02:38,420
목록의 마지막 항목을 pop합니다.

53
00:02:38,420 --> 00:02:41,065
문자열이 비어있지 않으면

54
00:02:41,065 --> 00:02:43,975
그 문자열이 목록에 이미 존재하는지 확인합니다.

55
00:02:43,975 --> 00:02:45,565
목록에 있는 경우

56
00:02:45,565 --> 00:02:52,285
해당 항목을 제거합니다.

57
00:02:52,285 --> 00:02:54,190
목록에 없는 경우

58
00:02:54,190 --> 00:02:57,005
목록의 끝에 해당 항목을 추가합니다.

59
00:02:57,005 --> 00:02:59,040
이 모든 3가지 경우에서

60
00:02:59,040 --> 00:03:02,665
우리는 다음과 같은 메세지를 반환하게 될 것입니다.

61
00:03:02,665 --> 00:03:05,970
"입력된 문자열이 추가되었습니다.(또는 제거되었습니다)"

62
00:03:05,970 --> 00:03:08,020
자 다시 앞부분으로 되돌아가봅시다.

63
00:03:08,020 --> 00:03:09,180
list_o_matic 함수의 호출 이후에

64
00:03:09,180 --> 00:03:10,750
무언가 결과가 반환될 것이고,

65
00:03:10,750 --> 00:03:13,270
그 메세지를 화면에 표시할 것입니다.

66
00:03:13,270 --> 00:03:15,040
이후에, 윗단계로 돌아가서

67
00:03:15,040 --> 00:03:16,705
목록내에 무언가 남은 항목이 있는지 체크합니다.

68
00:03:16,705 --> 00:03:19,210
그리고는 quit 이 입력되거나, 목록 내 항목이 텅 빌 때까지

69
00:03:19,210 --> 00:03:23,845
입력값을 계속해서 받습니다.

70
00:03:23,845 --> 00:03:26,290
이제 이 프로젝트를 빌드할 때, 

71
00:03:26,290 --> 00:03:30,445
몇가지 요구사항이 있습니다.

72
00:03:30,445 --> 00:03:32,740
우리의 모든 필수 코딩 예제에는

73
00:03:32,740 --> 00:03:35,500
몇몇 키워드가 포함되도록 요구사항이 존재합니다.

74
00:03:35,500 --> 00:03:39,005
우리는 반환 값을 가진 함수를 다루고 있기 때문에,

75
00:03:39,005 --> 00:03:41,320
def 와 return이라는 키워드가 필요하겠죠.

76
00:03:41,320 --> 00:03:46,000
반환값을 화면에 표시하는 과정도 존재함으로,

77
00:03:46,000 --> 00:03:48,920
print() 함수가 필요할 것입니다.

78
00:03:48,920 --> 00:03:51,340
그리고 목록 내에서 테스트할 항목을 취해야 하니까,

79
00:03:51,340 --> 00:03:54,700
input() 함수 역시 필요하겠죠.

80
00:03:54,700 --> 00:03:58,555
항목을 목록에 더할때든, 제거할때든 말입니다.

81
00:03:58,555 --> 00:04:00,040
그리고 나서, 우리는 일정한 로직을 진행하고

82
00:04:00,040 --> 00:04:03,365
조건부 if 선언문도 사용합니다.

83
00:04:03,365 --> 00:04:06,475
또, 항목이 목록 내에 실제로 존재하는지 확인할때는

84
00:04:06,475 --> 00:04:10,720
in 키워드를 사용합니다.

85
00:04:10,720 --> 00:04:13,060
우리는 목록의 끝에 항목을 추가할때 .append()를 사용할 것이고,

86
00:04:13,060 --> 00:04:15,370
목록에 끝에서 항목을 pop 할때 .pop()을 사용할 것이며,

87
00:04:15,370 --> 00:04:18,316
목록에 이미 존재하는 특정 항목을 제거할 때

88
00:04:18,316 --> 00:04:21,205
.remove()를 사용할 것입니다.

89
00:04:21,205 --> 00:04:23,725
우리 프로그램을 다시 살펴보면,

90
00:04:23,725 --> 00:04:26,890
전에는 시도해보지 않았던 것을 하나 시험해 볼 수 있습니다.

91
00:04:26,890 --> 00:04:28,390
만약 아무것도 목록에 추가되지 않은 상태에서

92
00:04:28,390 --> 00:04:30,370
마지막 항목을 pop해야 되는 상황이라면....

93
00:04:30,370 --> 00:04:32,035
여러분이 테스트를 진행했을 때

94
00:04:32,035 --> 00:04:34,210
먼저 cat이 제거되고,

95
00:04:34,210 --> 00:04:37,315
그다음에는 goat가, 그 다음으로는 다시 cat 이 제거되는 것을,

96
00:04:37,315 --> 00:04:38,945
그리고 목록에 아무것도 남지 않게되면 

97
00:04:38,945 --> 00:04:40,915
자동으로 프로그램이 종료되는 것을 보실 수 있습니다.

98
00:04:40,915 --> 00:04:43,120
그리고 프로그램 종료에 도달하는

99
00:04:43,120 --> 00:04:46,885
또다른 방법도 있습니다.

100
00:04:46,885 --> 00:04:49,985
두 항목이 존재하고 있었다가

101
00:04:49,985 --> 00:04:51,220
항목이 cat 하나만 남았을 때,

102
00:04:51,220 --> 00:04:53,210
여기에 cat을 추가해보겠습니다.

103
00:04:53,210 --> 00:04:56,885
아 그리고 이때 대문자 CAT 역시 입력 가능하다는것을 알아두시기 바랍니다.

104
00:04:56,885 --> 00:04:59,390
그냥 CAT을 한번 추가해 보죠.

105
00:04:59,390 --> 00:05:03,855
만약 이후 제가 이 두 항목을

106
00:05:03,855 --> 00:05:07,490
pop하게 되면, 목록은 완전히 비게 됩니다.

107
00:05:07,490 --> 00:05:10,335
자! 프로그램의 두 부분을 빌드하십시오.

108
00:05:10,335 --> 00:05:17,060
로직을 사용하여 프로그램을 실행해 입력 문자열을

109
00:05:17,060 --> 00:05:19,735
취하거나, 종료 여부를 결정하십시오.

110
00:05:19,735 --> 00:05:23,630
또한 list-o-matic 함수를 빌드하십시오.

111
00:05:23,630 --> 00:05:25,940
이 함수는 입력 문자열이

112
00:05:25,940 --> 00:05:28,085
목록 맨 뒤에서 무언가를 pop해야 하는지,

113
00:05:28,085 --> 00:05:32,330
특정 인스턴스를 제거하거나

114
00:05:32,330 --> 00:05:35,030
목록 끝에 추가해야하는지 여부를 확인할 수 있어야합니다.

115
00:05:35,030 --> 00:05:37,835
그리고 각 요구 사항에

116
00:05:37,835 --> 00:05:43,290
맞는 키워드를 사용해야합니다. 행복한 코딩시간 되시길 바랍니다!

