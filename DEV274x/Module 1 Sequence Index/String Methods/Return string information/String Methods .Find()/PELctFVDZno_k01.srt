0
00:00:04,470 --> 00:00:07,414
문자열 내에서 특정 문자나 문자열의

1
00:00:07,415 --> 00:00:12,425
인덱스 위치를 찾기 위해서는 find 메소드를 사용하면 좋습니다

2
00:00:13,923 --> 00:00:19,483
첫번재 코드셀에서는 "save your code" 가 담겨 있는 문자열 변수 work_tip에

3
00:00:19,484 --> 00:00:25,280
find 메소드를 사용합니다

4
00:00:25,281 --> 00:00:27,720
잊지 마세요! 코드는 항상 저장해 둬야 합니다

5
00:00:27,721 --> 00:00:33,000
그리고 find는 공백문자를 찾아줍니다

6
00:00:33,001 --> 00:00:37,630
그리고 index 4를 보면 공백문자가 있네요

7
00:00:37,631 --> 00:00:44,000
그래서 이게 ... "s"는 0, 1, 2, 3,

8
00:00:44,001 --> 00:00:46,100
공백문자는 index 4네요

9
00:00:46,101 --> 00:00:50,460
코드를 실행해보면, 공백문자가 index 4에 있다고 출력됩니다

10
00:00:50,461 --> 00:00:56,560
find 메소드는 문자열 내에서 문자의 index 위치를 빠르게

11
00:00:56,561 --> 00:01:01,850
알 수 있으므로 매우 유용합니다

12
00:01:04,140 --> 00:01:08,502
여기 "good code has meaningful variable names"를 값으로 가지는 

13
00:01:08,503 --> 00:01:10,580
또 다른 work_tip 변수가 있네요

14
00:01:10,581 --> 00:01:14,444
그리고 이 work_tip 변수가 가지고 있는 문자열이 무엇인지

15
00:01:14,445 --> 00:01:16,380
알려주는 코드가 밑에 있습니다

16
00:01:16,381 --> 00:01:21,961
이제 문자열을 출력할 거지만, 문자열에서 "code"의 위치가 어디인지 알고 싶네요

17
00:01:21,962 --> 00:01:26,935
우리가 해볼 건 첫번째 문자가 일치하는 부분이 어딘지 찾는겁니다

18
00:01:26,936 --> 00:01:31,826
그래서 code의 c가 어디있는지를 한번 알아보겠습니다

19
00:01:31,827 --> 00:01:36,327
아까 전에 했던건 공백문자가 어디있는지 알아보는거였습니다

20
00:01:36,328 --> 00:01:40,341
그때는 4였는데 지금은 5가 나오네요

21
00:01:42,364 --> 00:01:45,125
코드를 실행한 다음 조금씩 살펴봅시다. 

22
00:01:47,462 --> 00:01:51,690
루프문에 들어가기 앞서 문자열에 o가 있는지 한번 봅시다

23
00:01:51,691 --> 00:01:59,010
보니까 index1, 두번째 문자가 o 네요

24
00:01:59,011 --> 00:02:03,014
그래서 location에 1이 들어오게 될거고 if 문에서 0보다 큰지 검사할겁니다 

25
00:02:03,015 --> 00:02:04,700
이제 다시 루프에 들어갑니다

26
00:02:04,701 --> 00:02:08,060
그 다음 두번째 o의 index 위치를 찾을 겁니다 

27
00:02:08,061 --> 00:02:14,520
그런데 두번째 o의 인덱스 위치를 알 수 있는 

28
00:02:14,521 --> 00:02:19,500
유일한 방법은 처음 o 발견한 위치에서 1을 

29
00:02:19,501 --> 00:02:24,610
더한 위치를 다시 시작점으로 find 메소드를 써서 검색을 하는 겁니다 

30
00:02:25,900 --> 00:02:32,325
그게 location +1 을 쓰는 이유입니다 

31
00:02:35,117 --> 00:02:39,983
그러면 이 다음 루프를 돌때 2 + 1이 되서 3이 되고

32
00:02:39,984 --> 00:02:43,741
index 3에서 부터 검색을 시작하게됩니다

33
00:02:43,742 --> 00:02:45,879
그래서 다음 문자를 찾을 때까지 갑니다. 

34
00:02:45,880 --> 00:02:50,673
이게 문자열에서 특정 문자를 여러번 검색하는 방법이고,

35
00:02:50,674 --> 00:02:55,212
검색하려는 문자가 더이상 나오지 않으면 -1을 반환하고 루프를 빠져나오게 됩니다

36
00:02:58,786 --> 00:03:03,123
여기서 find 메소드가 가지는

37
00:03:03,124 --> 00:03:04,930
3가지 매개변수에 대해 알아보겠습니다

38
00:03:04,931 --> 00:03:08,090
첫번재 매개변수는 문자열이고,

39
00:03:08,091 --> 00:03:10,590
"meaning"을 찾게 될겁니다

40
00:03:10,591 --> 00:03:15,390
그때 시작 인덱스 와 종료 인덱스 사이에서 검색을 하게 될겁니다

41
00:03:15,391 --> 00:03:20,325
다라서 기본적으로 index 13 에서 index 33 안에서 

42
00:03:20,326 --> 00:03:25,130
검색을 하게 될겁니다

43
00:03:25,131 --> 00:03:29,980
슬라이싱을 사용한 후에 find 메소드를 사용해도 되지만 그렇게 하지 않아도 됩니다

44
00:03:29,981 --> 00:03:35,500
매개변수로 시작과 종료 인덱스 주소를 넣어

45
00:03:35,501 --> 00:03:40,305
find를 사용하면 되니까요

46
00:03:40,306 --> 00:03:43,287
이제 코드를 실행하고

47
00:03:43,288 --> 00:03:48,114
"meaningful variable" 이라는 문자열에서 

48
00:03:48,115 --> 00:03:52,679
"meaning"이 어디있는지 검사해보면

49
00:03:52,680 --> 00:03:57,802
index 1에 있네요

50
00:03:57,803 --> 00:04:03,287
이거 무슨 의미냐 하면 "meaning"이 슬라이싱된 하위 문자열에서 검색이 됬고,

51
00:04:03,288 --> 00:04:10,366
meaning_here 변수에 index 14라고 저장이 되었습니다

52
00:04:14,444 --> 00:04:18,717
find 메소드는 시작 인덱스와 종료 인덱스를 사용하여 

53
00:04:18,718 --> 00:04:25,260
문자열에서 문자열이나 문자를 찾는 데 사용할 수 있습니다. 

