0
00:00:00,170 --> 00:00:04,575
이것은 최종 필수 코딩 예제입니다.

1
00:00:04,575 --> 00:00:07,770
우리는 다시 파일을 가지고 작업할 것이며

2
00:00:07,770 --> 00:00:11,580
원소 퀴즈를 만드는 것이 목적입니다.

3
00:00:11,580 --> 00:00:14,730
파일에서부터 읽어낸 다음,

4
00:00:14,730 --> 00:00:18,990
사용자들에게 20번 이내의 원소들 중

5
00:00:18,990 --> 00:00:22,860
무엇무엇을 아는지 물어보는 식으로요.

6
00:00:22,860 --> 00:00:28,530
그러고 나서 해당 항목들이 코드 내에 포함되어있는지 보기 위해

7
00:00:28,530 --> 00:00:31,680
코드를 체크하고,

8
00:00:31,680 --> 00:00:34,890
몇개가 맞았고 몇개가 틀렸는지를

9
00:00:34,890 --> 00:00:36,780
퀴즈 스코어를 통해 나타내 줄 것입니다.

10
00:00:36,780 --> 00:00:38,730
그리고 여기에 몇가지 필수 요구사항이 써 있습니다.

11
00:00:38,730 --> 00:00:40,920
다른 예제에서도 그랬듯이

12
00:00:40,920 --> 00:00:43,440
이 요구사항들에 나타난 키워드들이 

13
00:00:43,440 --> 00:00:46,230
모두 포함되어야만,

14
00:00:46,230 --> 00:00:49,490
여러분이 코드를 최종 과제물로 제출했을 때

15
00:00:49,490 --> 00:00:52,195
코스를 통과할 수 있으니

16
00:00:52,195 --> 00:00:55,984
잘 읽어보시기를 바랍니다.

17
00:00:55,984 --> 00:00:58,905
계속해서 Jupyter Notebook을 

18
00:00:58,905 --> 00:01:02,760
살펴봅시다. 

19
00:01:02,760 --> 00:01:05,040
여기에는 사전에 로드해 놓은 솔루션 코드가 있는데,

20
00:01:05,040 --> 00:01:08,060
작동 방식을 확인하기 위한 것입니다.

21
00:01:08,060 --> 00:01:09,480
한번 실행하여 봅시다. 

22
00:01:09,480 --> 00:01:13,425
여기에 다른 원소명을 입력할 수 있습니다.

23
00:01:13,425 --> 00:01:15,990
사실 어떤 문자열이든 입력이 가능한데요,

24
00:01:15,990 --> 00:01:19,267
그러면 코드가 제가 읽어온 파일에 대해 테스트를 진행할 것입니다. 

25
00:01:19,267 --> 00:01:22,230
한번 임의의 원소를 여기에 입력해 봅시다.

26
00:01:22,230 --> 00:01:31,803
수소를 한번 입력해 보죠.

27
00:01:31,803 --> 00:01:33,690
오, 수소는 이미 입력되어있다고 나오는 것을 확인할 수 있군요.

28
00:01:33,690 --> 00:01:35,850
제가 다른 원소를 입력하더라도

29
00:01:35,850 --> 00:01:37,860
제가 입력한 항목에 대해 

30
00:01:37,860 --> 00:01:41,051
테스트가 진행될 것입니다.

31
00:01:41,051 --> 00:01:43,796
경우에 따라서는 목록 내에 집어넣을 수도 있겠죠.

32
00:01:43,796 --> 00:01:45,330
계속해서,

33
00:01:45,330 --> 00:01:59,820
항목들을 추가해 보겠습니다.

34
00:01:59,820 --> 00:02:05,387
여기서 저는 60%의 점수를 받았습니다. 

35
00:02:05,387 --> 00:02:06,995
여기 보시면, 수소를 2번 입력할 수는 없지만

36
00:02:06,995 --> 00:02:09,060
그렇다고 패널티가 주어지지는 않습니다.

37
00:02:09,060 --> 00:02:10,740
여기 보시면 수소, 붕소, 나트륨은 

38
00:02:10,740 --> 00:02:13,030
20번 이내의 원소이고,

39
00:02:13,030 --> 00:02:16,324
30번 원소인 아연은....포함되어 있지 않군요.

40
00:02:16,324 --> 00:02:21,690
또 python은 아시다시피 여러분이 꼭 배우셔야 하는 것이지만

41
00:02:21,690 --> 00:02:24,330
원소는 아니고,  

42
00:02:24,330 --> 00:02:28,145
20번 이내의 원소는 더더욱이 아닙니다.

43
00:02:28,145 --> 00:02:31,205
우리에게 주어진 필수 요구사항을 다시 한번 살펴보면,

44
00:02:31,205 --> 00:02:33,380
우리는 get_names라는 함수를 

45
00:02:33,380 --> 00:02:36,770
만들어야 하며,

46
00:02:36,770 --> 00:02:39,230
이 이름들의 입력값을 취한 다음

47
00:02:39,230 --> 00:02:43,070
목록내에 저장해야 합니다.

48
00:02:43,070 --> 00:02:45,170
그러고 나서 목록에 있는 

49
00:02:45,170 --> 00:02:48,290
각각의 항목들이 

50
00:02:48,290 --> 00:02:54,320
20번 이내의 원소 목록에 존재하는지 확인해야 합니다.

51
00:02:54,320 --> 00:02:56,120
그런 다음 맞춘 개수를 토대로

52
00:02:56,120 --> 00:02:59,380
퍼센티지를 계산할 것입니다.

53
00:02:59,380 --> 00:03:04,095
여기 있는 부분은 약간의 도움말입니다. 어떻게 이 작업을 하는지 알려줍니다.

54
00:03:04,095 --> 00:03:05,300
올바른 퍼센티지를 계산하는 

55
00:03:05,300 --> 00:03:07,725
몇가지 방법이 나와있습니다.

56
00:03:07,725 --> 00:03:10,325
예를 들어, 만약 각 5개의 항목이 감지되면

57
00:03:10,325 --> 00:03:13,520
각 항목은 20%의 점수를 가지게 되는 것이죠.

58
00:03:13,520 --> 00:03:15,380
이러한 방식으로 

59
00:03:15,380 --> 00:03:18,620
점수를 산출해 낼 수도 있지만,

60
00:03:18,620 --> 00:03:23,885
수학을 사용하여 나눗셈을 하고

61
00:03:23,885 --> 00:03:26,725
100을 곱하여 백분율 값을 나타낸다음

62
00:03:26,725 --> 00:03:31,340
합산한 뒤 소숫점을 제거하는 방법도 있습니다.

63
00:03:31,340 --> 00:03:34,765
다른 모든 과제와 마찬가지로

64
00:03:34,765 --> 00:03:37,820
이 과제 역시 키워드 요구사항들이 있습니다.

65
00:03:37,820 --> 00:03:41,165
우리는 반환 값을 가진 함수를 만들고 있으므로,

66
00:03:41,165 --> 00:03:44,450
def 키워드를 사용하여 반환을 해야 합니다.

67
00:03:44,450 --> 00:03:48,060
우리는 파일로 작업을 하고 있으므로, open 으로 파일을 열어야 하겠죠? 

68
00:03:48,060 --> 00:03:51,230
.readline 역시 사용해야 하고,

69
00:03:51,230 --> 00:03:54,885
.append도 마찬가지입니다

70
00:03:54,885 --> 00:03:57,230
그리고 input 부분을 보시면, 입력값을 취한다음

71
00:03:57,230 --> 00:04:00,520
strip을 사용하여 불필요한 공백을 제거해야 합니다.

72
00:04:00,520 --> 00:04:03,155
input 함수 역시 당연히 사용해야합니다.

73
00:04:03,155 --> 00:04:04,850
len 역시 사용하십시오.

74
00:04:04,850 --> 00:04:08,145
조건부 if역시 사용되어야 하며,

75
00:04:08,145 --> 00:04:09,740
비교하는 작업을 할때는

76
00:04:09,740 --> 00:04:11,566
 .upper 또는 .lower를 사용해야 할 것입니다. 그렇죠?

77
00:04:11,566 --> 00:04:13,250
양쪽의 목록 모두 일괄적으로 

78
00:04:13,250 --> 00:04:15,350
대문자이거나 소문자여야만 하니까요.

79
00:04:15,350 --> 00:04:18,155
수소로 테스트를 진행해서

80
00:04:18,155 --> 00:04:19,760
중복되었다는 것을 찾아내었을때는

81
00:04:19,760 --> 00:04:21,805
대소문자를 신경쓰지 않았지만요.

82
00:04:21,805 --> 00:04:24,410
for / in을 사용하여 목록을 

83
00:04:24,410 --> 00:04:27,500
반복하고 목록을 출력해야 합니다.

84
00:04:27,500 --> 00:04:29,495
edX에 제출했을때 학점을 받으려면,

85
00:04:29,495 --> 00:04:31,290
모든 항목이 사용되어 있어야만 하며

86
00:04:31,290 --> 00:04:36,410
올바르게 작동해야만 한다는 것을 명심하세요. 그럼 즐거운 코딩 되십시오.

